name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run Rust development commands
          allowed_tools: |
            Bash(cargo fmt),
            Bash(cargo clippy --all-targets --all-features -- -D warnings),
            Bash(cargo test),
            Bash(cargo test *),
            Bash(cargo build --release),
            Bash(./target/release/claude-python-guardrails *),
            Bash(git *)
          
          # Custom instructions for this Rust project
          custom_instructions: |
            This is a Rust CLI tool for Claude Code Python automation. When working on this project:
            - Always run `cargo fmt` for code formatting
            - Fix all clippy warnings with `cargo clippy --all-targets --all-features -- -D warnings`
            - Ensure all tests pass with `cargo test`
            - Test CLI functionality with `./target/release/claude-python-guardrails --help`
            - Follow the development workflow in WORKFLOW.md
            - Update integration tests if you change CLI behavior or descriptions
            - The tool provides smart Python linting/testing automation for Claude Code hooks
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

